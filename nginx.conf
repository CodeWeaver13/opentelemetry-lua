server {
    listen       80;
    server_name  localhost;

    location / {
        default_type text/html;

        access_by_lua_block {
            local tracer_provider_new = require("opentelemetry.trace.tracer_provider").new
            local ngx_batch_span_processor_new = require("opentelemetry.trace.ngx_batch_span_processor").new
            local span_kind = require("opentelemetry.trace.span_kind")
            local otlp_exporter_new = require("opentelemetry.trace.exporter.otlp").new
            local resource_new = require("opentelemetry.resource").new
            local attr = require("opentelemetry.attribute")
            local trace_context = require("opentelemetry.trace.propagation.trace_context")
            local carrier_new = require("opentelemetry.trace.propagation.ngx_carrier").new
            local exporter_client_new = require("opentelemetry.trace.exporter.ngx_http_client").new

            local ngx_batch_span_processor = ngx_batch_span_processor_new(otlp_exporter_new(exporter_client_new("192.168.8.211:4317", 3)))
            local tp = tracer_provider_new({ngx_batch_span_processor},
                    {resource = resource_new(attr.string("service.name", "openresty"), attr.int("attr_int", 100))})
            local tracer = tp:tracer("opentelemetry-lua")
            local span = tracer:start(trace_context.extract(carrier_new()), "access_by_lua_block", {
                kind = span_kind.internal,
                attributes = {attr.double("attr_double", 10.24), attr.bool("attr_bool", true)},
            })
            trace_context.inject(span:context(), carrier_new())
            ngx.ctx.span = span
        }

        proxy_pass http://192.168.8.211:1232;

        header_filter_by_lua_block {
            local span_status = require("opentelemetry.trace.span_status")
            local tracer = ngx.ctx.span:tracer_provider():tracer("opentelemetry-lua")
            local sub_span = tracer:start(ngx.ctx.span:context(), "header_filter_by_lua_block")
            local attr = require("opentelemetry.attribute")

            sub_span:record_error("this is err")
            sub_span:set_status(span_status.error, "set status err")
            sub_span:add_event("event1", {attributes = {attr.string("attr_string", "header_filter_by_lua_block")}})
            sub_span:finish();
        }

        log_by_lua_block {
            ngx.ctx.span:finish()
        }
    }
}